import re

def process_dex_entries(input_file, output_file):
    # Dictionary mapping file numbers to Pokémon names
    pokemon_dict = {
        "012": "butterfree",
        "015": "beedrill",
        "016": "pidgey",
        "017": "pidgeotto",
        "018": "pidgeot",
        "021": "psyduck",
        "022": "golduck",
        "023": "ekans",
        "024": "arbok",
        "025": "pikachu",
        "026": "raichu",
        "030": "nidorina",
        "031": "nidoqueen",
        "033": "nidorino",
        "034": "nidoking",
        "035": "clefairy",
        "036": "clefable",
        "037": "vulpix",
        "038": "ninetales",
        "039": "jigglypuff",
        "040": "wigglytuff",
        "041": "zubat",
        "042": "golbat",
        "044": "gloom",
        "045": "vileplume",
        "046": "paras",
        "047": "parasect",
        "048": "venonat",
        "049": "venomoth",
        "050": "diglett",
        "051": "dugtrio",
        "052": "meowth",
        "053": "persian",
        "056": "mankey",
        "057": "primeape",
        "058": "growlithe",
        "059": "arcanine",
        "060": "poliwag",
        "061": "poliwhirl",
        "062": "poliwrath",
        "063": "abra",
        "064": "kadabra",
        "065": "alakazam",
        "066": "machop",
        "067": "machoke",
        "068": "machamp",
        "070": "weepinbell",
        "071": "victreebel",
        "073": "tentacruel",
        "074": "geodude",
        "075": "graveler",
        "076": "golem",
        "077": "ponyta",
        "078": "rapidash",
        "079": "slowpoke",
        "080": "slowbro",
        "081": "magnemite",
        "082": "magneton",
        "083": "farfetch'd",
        "088": "grimer",
        "089": "muk",
        "091": "cloyster",
        "092": "gastly",
        "093": "haunter",
        "094": "gengar",
        "095": "onix",
        "100": "voltorb",
        "101": "electrode",
        "102": "exeggcute",
        "103": "exeggutor",
        "106": "hitmonlee",
        "107": "hitmonchan",
        "109": "koffing",
        "110": "weezing",
        "111": "rhyhorn",
        "112": "rhydon",
        "113": "chansey",
        "114": "tangela",
        "115": "kangaskhan",
        "116": "horsea",
        "117": "seadra",
        "118": "togepi",
        "119": "togetic",
        "120": "staryu",
        "121": "starmie",
        "122": "mr. mime",
        "123": "scyther",
        "124": "jynx",
        "125": "electabuzz",
        "126": "magmar",
        "127": "pinsir",
        "128": "tauros",
        "129": "magikarp",
        "130": "gyarados",
        "131": "lapras",
        "133": "eevee",
        "134": "vaporeon",
        "135": "jolteon",
        "136": "flareon",
        "137": "porygon",
        "143": "snorlax",
        "147": "dratini",
        "148": "dragonair",
        "149": "dragonite",
        "152": "chikorita",
        "153": "bayleef",
        "154": "meganium",
        "155": "cyndaquil",
        "156": "quilava",
        "157": "typhlosion",
        "158": "totodile",
        "159": "croconaw",
        "160": "feraligatr",
        "162": "furret",
        "166": "ledian",
        "168": "ariados",
        "169": "crobat",
        "170": "chinchou",
        "171": "lanturn",
        "174": "magnezone",
        "177": "natu",
        "178": "xatu",
        "179": "mareep",
        "180": "flaaffy",
        "181": "ampharos",
        "182": "bellossom",
        "185": "sudowoodo",
        "186": "politoed",
        "190": "aipom",
        "191": "sunkern",
        "192": "sunflora",
        "193": "yanma",
        "194": "wooper",
        "195": "slowking",
        "196": "espeon",
        "197": "umbreon",
        "198": "murkrow",
        "200": "misdreavus",
        "201": "unown",
        "202": "wobbuffet",
        "203": "girafarig",
        "204": "pineco",
        "205": "forretress",
        "206": "dunsparce",
        "207": "gligar",
        "208": "steelix",
        "209": "snubbull",
        "210": "granbull",
        "211": "qwilfish",
        "212": "scizor",
        "213": "shuckle",
        "214": "heracross",
        "215": "sneasel",
        "216": "teddiursa",
        "217": "ursaring",
        "218": "slugma",
        "219": "magcargo",
        "220": "swinub",
        "221": "piloswine",
        "222": "corsola",
        "223": "remoraid",
        "224": "octillery",
        "226": "mantine",
        "227": "skarmory",
        "228": "houndour",
        "229": "houndoom",
        "230": "kingdra",
        "231": "phanpy",
        "232": "donphan",
        "233": "porygon2",
        "237": "hitmontop",
        "238": "elekid",
        "240": "magby",
        "241": "miltank",
        "242": "blissey",
        "243": "raikou",
        "244": "entei",
        "245": "suicune",
        "246": "larvitar",
        "247": "pupitar",
        "248": "tyranitar",
        "249": "lugia",
        "250": "ho-oh",
        "251": "celebi",
        "301": "hisuian typhlosion",
        "302": "rowlet",
        "303": "dartrix",
        "304": "decidueye",
        "305": "hisuian decidueye",
        "306": "oshawott",
        "307": "dewott",
        "308": "samurott",
        "309": "hisuian samurott",
        "310": "wyrdeer",
        "311": "kleavor",
        "312": "ursaluna",
        "313": "basculin",
        "314": "basculegion",
        "315": "sneasler",
        "316": "overqwil",
        "317": "enamorus",
        "318": "lilligant",
        "319": "hisuian lilligant",
        "320": "torterra",
        "321": "hisuian arcanine",
        "322": "hisuian voltorb",
        "323": "hisuian electrode",
        "324": "hisuian avalugg",
        "325": "cresselia",
        "326": "dialga",
        "327": "palkia",
        "328": "regigigas",
        "329": "giratina",
        "330": "heatran",
        "331": "shaymin",
        "332": "arceus",
        "333": "zweilous",
        "334": "hydreigon",
        "335": "zoroark",
        "336": "vullaby",
        "337": "mandibuzz",
        "338": "thundurus",
        "339": "tornadus",
        "340": "landorus",
        "341": "volcarona",
        "342": "vulpix",
        "343": "ninetales",
        "344": "zorua",
        "345": "zoroark",
        "346": "hisuian braviary",
        "347": "hisuian zoroark",
        "348": "hisuian zorua",
        "349": "hisuian growlithe",
        "350": "hisuian goodra",
        "351": "hisuian sliggoo",
        "352": "hisuian sneasel",
        "353": "hisuian qwilfish",
        "354": "ursaring",
        "355": "bergmite",
        "356": "avalugg",
        "357": "ralts",
        "358": "kirlia",
        "359": "gardevoir",
        "360": "gallade",
        "361": "hisuian braviary",
        "362": "hisuian zoroark",
        "363": "dialga",
        "429": "mismagius",
        "430": "honchkrow",
        "446": "munchlax",
        "461": "weavile",
        "464": "rhyperior",
        "465": "tangrowth",
        "466": "electivire",
        "467": "magmortar",
        "468": "togekiss",
        "469": "yanmega",
        "470": "leafeon",
        "471": "glaceon",
        "472": "gliscor",
        "473": "mamoswine",
        "474": "porygon-z",
        "700": "sylveon"
    }

    # Read the input file
    with open(input_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Split the content by file markers
    entries = re.split(r'(--- \d+\.asm ---)', content)
    
    # Process each entry
    processed_content = ""
    current_header = ""
    
    for i, part in enumerate(entries):
        # Check if this is a header
        header_match = re.match(r'--- (\d+)\.asm ---', part)
        if header_match:
            file_num = header_match.group(1)
            current_header = part.strip()
            
            # Get the Pokémon name from our dictionary
            if file_num in pokemon_dict:
                pokemon_name = pokemon_dict[file_num]
                processed_content += f"{current_header} ; {pokemon_name}\n\n"
            else:
                # If we don't have a mapping, keep the header as is
                processed_content += current_header + "\n\n"
            
            # Don't add the content part yet
            continue
        
        # If this is content, add it
        if part.strip() and i > 0:
            processed_content += part
    
    # Write the processed content to the output file
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(processed_content)
    
    print(f"Processing complete. Output saved to {output_file}")

# Example usage
if __name__ == "__main__":
    input_file = "dex_entries_all_text.txt"
    output_file = "dex_entries_processed.txt"
    
    process_dex_entries(input_file, output_file)